name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job 1: An√°lisis de cambios
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'functions/**'
            frontend:
              - 'frontend-app/**'

  # Job 2: CI Backend
  backend-ci:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    defaults:
      run:
        working-directory: ./functions

    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üì¶ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: üóÑÔ∏è Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì¶ Install dependencies
        run: |
          # Intentar frozen-lockfile primero, si falla usar no-frozen-lockfile
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "‚úÖ Installed with frozen lockfile"
          else
            echo "‚ö†Ô∏è Frozen lockfile failed, installing with no-frozen-lockfile"
            pnpm install --no-frozen-lockfile
          fi

      - name: üîç Lint code
        run: pnpm run lint

      - name: üß™ Run tests
        run: echo "‚è≠Ô∏è Backend tests skipped (not configured yet)"

      - name: üèóÔ∏è Build backend
        run: pnpm run build

  # Job 3: CI Frontend
  frontend-ci:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    defaults:
      run:
        working-directory: ./frontend-app

    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üì¶ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: üóÑÔ∏è Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì¶ Install dependencies
        run: |
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "‚úÖ Installed with frozen lockfile"
          else
            echo "‚ö†Ô∏è Frozen lockfile failed, installing with no-frozen-lockfile"
            pnpm install --no-frozen-lockfile
          fi

      - name: üîç Lint code
        run: pnpm run lint

      - name: üß™ Run tests
        run: echo "‚è≠Ô∏è Frontend tests skipped (not configured for CI yet)"

      - name: üèóÔ∏è Build frontend
        run: pnpm run build --configuration=production

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend-app/dist/
          retention-days: 1

  # Job 4: Deploy to Firebase (solo en main)
  deploy:
    runs-on: ubuntu-latest
    needs: [changes, backend-ci, frontend-ci]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      # Deploy Backend (si hay cambios)
      - name: üöÄ Deploy Backend to Firebase
        if: ${{ needs.changes.outputs.backend == 'true' && needs.backend-ci.result == 'success' }}
        working-directory: ./functions
        run: |
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "‚úÖ Backend installed with frozen lockfile"
          else
            echo "‚ö†Ô∏è Backend frozen lockfile failed, using no-frozen-lockfile"
            pnpm install --no-frozen-lockfile
          fi
          pnpm run build
          npx firebase deploy --only functions --token "${{ secrets.FIREBASE_TOKEN }}"

      # Deploy Frontend (si hay cambios)
      - name: üöÄ Deploy Frontend to Firebase
        if: ${{ needs.changes.outputs.frontend == 'true' && needs.frontend-ci.result == 'success' }}
        working-directory: ./frontend-app
        run: |
          if pnpm install --frozen-lockfile 2>/dev/null; then
            echo "‚úÖ Frontend installed with frozen lockfile"
          else
            echo "‚ö†Ô∏è Frontend frozen lockfile failed, using no-frozen-lockfile"
            pnpm install --no-frozen-lockfile
          fi
          pnpm run build --configuration=production
          npx firebase deploy --only hosting --token "${{ secrets.FIREBASE_TOKEN }}"

      # Deploy completo si hay cambios en ambos
      - name: üöÄ Deploy Full Stack
        if: ${{ needs.changes.outputs.backend == 'true' && needs.changes.outputs.frontend == 'true' }}
        run: |
          npx firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}"
